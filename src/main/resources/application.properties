spring.application.name=Spotify Recommender

spring.security.oauth2.client.registration.spotify.client-id=${SPOTIFY_CLIENT_ID}

# A chave secreta da sua aplicação. O Spring usa isso para trocar o código de autorização pelo token de acesso de forma segura.
spring.security.oauth2.client.registration.spotify.client-secret=${SPOTIFY_CLIENT_SECRET}

# --- Detalhes do Fluxo de Autenticação (Como o Spring deve se comportar) ---

# Informa ao Spring qual método usar para a autenticação. O padrão 'authorization_code' é o correto para este fluxo.
spring.security.oauth2.client.registration.spotify.authorization-grant-type=authorization_code

# A URL para a qual o Spring vai redirecionar o usuário para ele fazer o login.
spring.security.oauth2.client.registration.spotify.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}

# As permissões que sua aplicação vai solicitar ao usuário. Separe-as com vírgula.
spring.security.oauth2.client.registration.spotify.scope=user-read-private,user-read-email,user-read-recently-played,user-read-currently-playing

# --- Endereços da API do Spotify (Onde o Spring vai encontrar os serviços do Spotify) ---

# O Spring já tem uma configuração padrão para provedores conhecidos como Google, GitHub, etc.
# Mas para o Spotify, é uma boa prática ser explícito.
spring.security.oauth2.client.provider.spotify.authorization-uri=https://accounts.spotify.com/authorize
spring.security.oauth2.client.provider.spotify.token-uri=https://accounts.spotify.com/api/token
spring.security.oauth2.client.provider.spotify.user-info-uri=https://api.spotify.com/v1/me
spring.security.oauth2.client.provider.spotify.user-name-attribute=display_name

# Diz ao Spring para usar os cabeçalhos X-Forwarded enviados pelo proxy (ngrok)
server.forward-headers-strategy=FRAMEWORK

server.tomcat.remoteip.internal-proxies=.*
